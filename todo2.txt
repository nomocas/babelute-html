



.route(state, '/...', 
	decompose.before(function(route){
		if(!app.isAuthenticated)
			throw new Errors.NeedAuthentication();
		return route;
	}).after(function(matched){
		return matched;
	}))

.load(state, 'my.path', '...', 
	decompose.before(function(request){

	})
	.after(function(loadedValue){

	})
	.fail(function(e){

	}))

.load(state, function(state){
	return loader.get('...').then(function(){})
});

.autosave(state, 'my.path', protocol, 
	decompose.before(function(state, path, protocol){
		state.$ui.sending = true;
	}).after(function(state, path, protocol){
		state.$ui.sending = false;
	}).fail(function(state, path, e){
		
	}));

.validate(state, 'my.path', rule, 
	decompose.before(function(state, path, rule){
		
	}).after(function(state, path, rule){
		
	}));

.bindModel(state, path, protocol, 
	decompose.before(function(state, path, protocol, model){

	}).after(function(state, path, protocol, model){

	}));

.bindCollection(state, arrayPath, protocol,
	decompose.before(function(state, path, protocol, model){

	}).after(function(state, path, protocol, model){

	}));


cons : 

	- if diffed : composition will be re-compiled each time


	===> if we do that with babelute sentences : reproduction is minimal
		AND diffig will just check function immutability


So if with babelute :


	==> decompo.before(function(){}).around